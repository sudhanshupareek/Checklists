{
  "name": "metric-log",
  "version": "0.2.4",
  "description": "Log metrics with 'key=value'",
  "main": "index.js",
  "scripts": {
    "test": "NODE_ENV=test ./node_modules/.bin/mocha test/metric-log.test",
    "bench": "NODE_ENV=test ./node_modules/.bin/mocha test/metric-log.bench"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/CamShaft/metric-log.git"
  },
  "keywords": [
    "log",
    "metrics",
    "metric"
  ],
  "author": {
    "name": "Cameron Bytheway",
    "email": "cameron@nujii.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "dependencies": {
    "simple-debug": "~1.0.0"
  },
  "devDependencies": {
    "should": "~1.2.2",
    "mocha": "~1.8.2"
  },
  "readme": "metric-log [![Build Status](https://travis-ci.org/CamShaft/metric-log.png?branch=master)](https://travis-ci.org/CamShaft/metric-log)\n==========\n\nLog metrics in a simple key=value format for easy parsing.\n\nInstall\n-------\n\n```sh\nnpm install --save metric-log\n```\n\nAPI\n-----\n\n### metric(measure, value)\n\n```js\nvar metric = require(\"metric-log\");\n\nmetric(\"request\", 1);\n  // measure=request val=1\n```\n\n### metric(measure, value, units)\n\n```js\nvar metric = require(\"metric-log\");\n\nmetric(\"response_time\", 40, \"ms\");\n  // measure=response_time val=40 units=ms\n```\n\n### metric(measure, value, units, obj)\n\n```js\nvar metric = require(\"metric-log\");\n\nmetric(\"response_time\", 40, \"ms\", {lib:'my-lib'});\n  // measure=response_time val=40 units=ms lib=my-lib\n```\n\n### metric(obj)\n\nComplex objects can also be passed. Any nested objects/arrays will be converted to JSON.\n\n```js\nvar metric = require(\"metric-log\");\n\nmetric({host: \"my.host.com\", service: \"requests\", metric: 5, tags: [\"requests\", \"testing\"]});\n  // host=my.host.com service=requests metric=5 tags=\"[\\\"requests\\\",\\\"testing\\\"]\"\n```\n\n### metric.context(obj)\n\nYou can also setup a default context to be applied to each metric.\n\n```js\nvar metric = require(\"metric-log\").context({host: \"my.host.com\"});\n\nmetric(\"response_time\", 12, \"ms\");\n  // host=my.host.com measure=response_time val=12 units=ms\n```\n\n### metric.context(obj).use(parentContext)\n\nYou can also inherit from parent contexts\n\n```js\nvar express = require(\"express\")\n  , metric = require(\"metric-log\")\n  , parent = metric.context({host: \"my.host.com\"});\n\nvar app = express();\n\napp.use(function(req, res, next) {\n  req.metric = metric.context({request_id: req.get(\"x-request-id\")}).use(parent);\n});\n\napp.get(\"/\", function(req, res) {\n  req.metric(\"home_page\", 1);\n  // host=my.host.com request_id=12345 measure=home_page val=1\n});\n```\n\n### metric.profile(id[, obj])\n\nHelper function to profile processes like calling an api or database.\n\n```js\nvar metric = require('metric');\n\nvar end = metric.profile('my-api-call');\n\napi('id', function(err, result){\n  end();\n  // measure=my-api-call val=203 units=ms\n});\n```\n\nYou can also pass some metrics as a second parameter\n\n```js\nvar end = metric.profile('my-api-call', {at:\"info\", lib:\"my-lib\"});\n\napi('id', function(err, result){\n  end({err:err});\n  // measure=my-api-call val=203 units=ms at=info lib=my-lib err=null\n});\n```\n\nTests\n-----\n\n```sh\nnpm test\n```\n\nBenchmarks\n----------\n\nThese were some benchmarks run on my MacBook Pro.\n\n```sh\n$ npm run-script bench\n\n․metric(measure, value) \n   885739.5925597874 metrics/sec\n․metric(measure, value, units) \n   787401.5748031496 metrics/sec\n․metric(obj) \n   1901140.6844106463 metrics/sec\n․metric(deepObj) \n   344589.9379738112 metrics/sec\n․context(measure, value) \n   372023.8095238095 metrics/sec\n․context(measure, value, units) \n   318066.15776081424 metrics/sec\n․context(obj) \n   365363.5367190354 metrics/sec\n․context(deepObj) \n   195694.71624266144 metrics/sec\n\n\n  8 tests complete (20 seconds)\n```\n",
  "_id": "metric-log@0.2.4",
  "_from": "metric-log@~0.2.2"
}
